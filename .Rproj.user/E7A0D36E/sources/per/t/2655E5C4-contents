---
title: "EPSRC Grant Funding Outcomes"
subtitle: "Grants on the Web Data Collection"
output:
  pdf_document: 
    number_sections: yes
  html_document:
    df_print: paged
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r package_install, echo=FALSE, message=FALSE}
# General-purpose data wrangling
library(tidyverse)  
# Parsing of HTML/XML files  
library(rvest)    
# String manipulation
library(stringr)
# Cleaning dataframe names
library(janitor)
# Logging
library(logr)
# Progress monitoring
library(progress)
```


```{r progress bar creation function}
init_bar <- function(bar_length){
  bar <- progress_bar$new(
    format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta = :eta \n", 
    total = bar_length
  )
  return(bar)
}
```


# Themes

```{r set variables and functions}
# this function is more reliable than a plain read_html is less likely to result in an 400 http error.
get_html <- function(url){
  # set file location
  html_dest = '../data/temp_gow_html.html'
  
  start_time <- Sys.time()
  # download and read html from website
  download.file(paste("https://gow.epsrc.ukri.org/",url,sep = ""), destfile = html_dest, quiet = TRUE)
  end_time <- Sys.time()
  
  return(list(
      html = read_html(html_dest),
      wait = end_time - start_timet
    ))
}
```

```{r}

# base theme url
base_url <- "NGBOListThemes.aspx"

# get html content from url
content <- get_html(base_url)$html

# parse HTML for list of hrefs
theme_href_list <- content %>%
  html_nodes(xpath = "//td/a") %>% 
  html_attr("href")

# parse HTML for list of theme names
theme_name_list <- content %>%
  html_nodes(xpath = "//td/a") %>% 
  html_text()

# drop last elements as blank
theme_href_list <- theme_href_list[1:12]
theme_name_list <- theme_name_list[1:12]

# Split in to challenge and capability themes
challenge_themes <- theme_name_list[1:5]
capability_themes <- theme_name_list[6:12]

# # extract theme names from urls and store them
# theme_list <- c()
#   
# for (url in theme_href_list) {
#   theme_name <- str_match(url, "Theme=(.*?)&")[2]
#   theme_list <- c(theme_list, theme_name)
# }
```

```{r init_tibble}
theme_df <- tibble(
  theme_name = character(),
  theme_type = character(),
  research_area = character(),
  grant_ref = character()
)
```

```{r grants}
# https://gow.epsrc.ukri.org/NGBOListThemeDrillDown.aspx?CapabilityTheme=Engineering&ItemId=Engineering

for (theme_url in theme_href_list) {
  # first get the equivalent theme name
  theme_name <- theme_name_list[which(theme_href_list == theme_url)[1]]
  
  # is the theme a challenge theme or a capability theme
  theme_type <- ifelse(theme_name %in% challenge_themes, 'Challenge', 'Capability')
  
  # then get the html page for the theme
  start_time <- Sys.time()
  theme_content <- get_html(theme_url)$html
  end_time <- Sys.time()
  # work out duration for response for polite requesting
  theme_wait <- end_time - start_time
  
  # parse HTML for list of research area urls
  area_href_list <- theme_content %>%
    html_nodes(xpath = "//td/a") %>% 
    html_attr("href")

  # parse HTML for list of research area names
  area_name_list <- theme_content %>%
    html_nodes(xpath = "//td/a") %>% 
    html_text()
  
  # wait for the response duration to be polite to the website
  Sys.sleep(theme_wait)
  
  for (area_url in area_href_list) {
    # first get the equivalent research area name
    area_name <- area_name_list[which(area_href_list == area_url)[1]]
    
    # get html content from website, timing the response time
    start_time <- Sys.time()
    area_content <- get_html(area_url)$html
    end_time <- Sys.time()
    
    # calculate the response time
    area_wait <- end_time - start_time
    
    # only need to parse the links so we can later extract the grant reference number
    grant_ref_list <- area_content %>%
      html_nodes(xpath = "//td/a") %>% 
      html_attr("title") %>% 
      unique()
    
    for (grant_ref in grant_ref_list) {
      theme_df <- theme_df %>% 
        add_row(
            theme_name = theme_name,
            theme_type = theme_type,
            research_area = area_name,
            grant_ref = grant_ref
        )
      
    }
    
    Sys.sleep(area_wait)
  }
  
  
}


```

```{r save_df}
theme_df %>% write.csv('../data/themes.csv')
```


# Panels

```{r define extraction functions}
extract_table <- function(html, css_selector, head_row = FALSE, log_on = TRUE){
  out <- tryCatch(
    {
      html_out <- html %>% 
        html_element(css_selector) %>% 
        html_table(header = head_row)
      
      if (log_on) {
        log_print(str_glue("Successfully extracted {css_selector} table"), console = FALSE)
      }
      
      html_out
    },
    error=function(cond){
      if (log_on) {
        log_print(str_glue("Unsuccessfully extracted {css_selector} table. \n{cond}"), console = FALSE)
      }
      return(tibble())
    }
  )
  return(out)
}

extract_elements <- function(html, css_selector, attr = "text", log_on = TRUE){
  out <- tryCatch(
    {
      if (attr == "text") {
        out <- html %>% 
          html_elements(css_selector) %>% 
          html_text(trim = TRUE) 
      } else {
        out <- html %>% 
          html_elements(css_selector) %>%
          html_attr(attr)
      }
      
      # Detect if logging is on for this function (on by default)
      if (log_on) {
        log_print(
          str_glue("Successfully extracted {css_selector} elements {attr} attribute"), 
          console = FALSE, 
          hide_notes = TRUE,
        )
      }
      # The trycatch returns the last expression so we need to ensure that it is returned
      out
    },
    error=function(cond){
      if (log_on) {
        log_print(
          str_glue("Unsuccessfully extracted {css_selector} elements. \n{cond}"), 
          console = FALSE,
          hide_notes = TRUE,
        )
      }
      return(tibble())
    }
  )
  return(out)
}
```


```{r experimental_scaping}
test_panel <- get_html("NGBOViewPanel.aspx?PanelId=1-4SSWIR")$html

test_panel %>% 
  extract_elements("#pnlContent a", attr = "href", log_on = FALSE) %>% 
  tibble(href = .) %>% 
  filter(str_detect(href, "NGBOViewPanelROL.aspx?"))

test_panel %>% 
  html_elements("#pnlContent a") %>%
  html_attr("href")

test_panel %>% extract_table("#dgFullbyNum", log_on = FALSE)

dgDetails <- dgDetails %>% 
  rename(
    member_name = X1,
    member_institution = X2,
    member_position = X3,
  ) %>% 
  mutate(
    panel_id = 'test_1',
  )

dgDetails


test_panel %>% extract_elements("#dgDeferredGrants span", log_on = FALSE)

dgFullByNum <-  test_panel %>% 
  html_element("#dgFullByNum") %>% 
  html_table(header = TRUE)

dgFullByNum <- dgFullByNum %>% 
  clean_names() %>% 
  filter(funding_priority_list != "Including:") %>% 
  head(-1) 

dgFullByNum <- dgFullByNum %>% mutate(funding_priority_list = sub(pattern = '.: ', x = funding_priority_list, replacement = ""))

dgFullByNum


dgFullByValue <-  test_panel %>% 
  html_element("#dgFullByValue") %>% 
  html_table(header = TRUE)

dgFullByValue <- dgFullByValue %>% 
  clean_names() %>% 
  filter(funding_priority_list != "Including:") %>% 
  head(-1) 

dgFullByValue <- dgFullByValue %>% mutate(funding_priority_list = sub(pattern = '.: ', x = funding_priority_list, replacement = ""))

dgFullByValue


```

```{r func_def_panel_data}
panel_dataframes <- list(
  panel_details_df = tibble(),
  panel_members_df = tibble(),
  funded_type1_bynum_df = tibble(),
  funded_type1_byvalue_df = tibble(),
  outlines_bynum_df = tibble(),
  outline_byvalue_df = tibble(),
  deferred_fellowships_grants_df = tibble(),
  approved_fellowships_grants_df = tibble(),
  sift_grants_bynum_df = tibble(),
  sift_grants_byvalue_df = tibble(),
  funded_type2_bynum_df = tibble(),
  funded_type2_byvalue_df = tibble(),
  panel_rank_links_df = tibble()
)

error_panel_links <- c()

sweet_get_panel_data <- function(dataframes = panel_dataframes, link, log_on = TRUE){
  # wrapped function for collecting data from panel
  # get panel html
  panel <- get_html(link)
  
  # extract general panel details
  # general content: panel id - from link
  panel_id <- str_match(link,"PanelId=(.*)"[2])
  
  # general content: panel name (#lblPanelName) - from html
  panel_name <- panel$html %>% html_element("#lblPanelName") %>% html_text()
  
  # general content: panel date (#lblDateOfPanel) - from html
  panel_date <- panel$html %>% html_element("#lblDateOfPanel") %>% html_text()
  
  # general content: panel contact (#lblPanelContact) - from html
  panel_contact <- panel$html %>% html_element("#lblPanelContact") %>% html_text()
  
  # general content: panel page type - from link
  panel_type <- paste(str_match(link,"([A-Z]*)View(.*?).aspx?")[2:3], collapse = '')
  
  panel_details <- tibble(
    panel_id = panel_id,
    panel_name = panel_name,
    panel_date = panel_date,
    panel_contact = panel_contact,
    panel_type = panel_type,
  )
  
  # extract tables
  #dgDetails
  panel_members <- panel$html %>% 
    extract_table("#dgDetails", head_row = FALSE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgFullByNum
  funded_type1_bynum <- panel$html %>% 
    extract_table("#dgFullByNum", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgFullByValue
  funded_type1_byvalue <- panel$html %>% 
    extract_table("#dgFullByValue", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgOutlineByNumber
  outlines_bynum <- panel$html %>% 
    extract_table("#dgOutlineByNumber", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgOutlineByValue
  outline_byvalue <- panel$html %>% 
    extract_table("#dgOutlineByValue", log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgDeferredGrants span
  deferred_fellowships_grants <- panel$html %>% 
    extract_elements("#dgDeferredGrants span", log_on = log_on) %>% 
    tibble(grant_ref = .) %>% 
    filter(grant_ref != "") %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgGrants
  approved_fellowships_grants <- panel$html %>% 
    extract_table("#dgGrants", log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgSiftByNumber
  sift_grants_bynum <- panel$html %>% 
    extract_table("#dgSiftByNumber", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgSiftByValue
  sift_grants_byvalue <- panel$html %>% 
    extract_table("#dgSiftByValue", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgPanelByNum
  funded_type2_bynum <- panel$html %>% 
    extract_table("#dgPanelByNum", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  #dgPanelByValue
  funded_type2_byvalue <- panel$html %>% 
    extract_table("#dgPanelByValue", head_row = TRUE, log_on = log_on) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
    # pull links
  #pnlContent a
  panel_rank_links <-  panel$html %>% 
    extract_elements("#pnlContent a", attr = "href", log_on = log_on) %>% 
    tibble(href = .) %>% 
    filter(str_detect(href, "NGBOViewPanelROL.aspx?")) %>% 
    mutate(panel_id = panel_id, panel_type = panel_type)
  
  
  # Update the dataframes
  dataframes$panel_details_df <- dataframes$panel_details_df %>% 
    add_row(panel_details)
  
  dataframes$panel_members_df <- dataframes$panel_members_df %>% 
    add_row(panel_members)
  
  dataframes$funded_type1_bynum_df <- dataframes$funded_type1_bynum_df %>% 
    add_row(funded_type1_bynum)
  
  dataframes$funded_type1_byvalue_df <- dataframes$funded_type1_byvalue_df %>% 
    add_row(funded_type1_byvalue)
  
  dataframes$outlines_bynum_df <- dataframes$outlines_bynum_df %>% 
    add_row(outlines_bynum)
  
  dataframes$outline_byvalue_df <- dataframes$outline_byvalue_df %>% 
    add_row(outline_byvalue)
  
  dataframes$deferred_fellowships_grants_df <- dataframes$deferred_fellowships_grants_df %>% 
    add_row(deferred_fellowships_grants)
  
  dataframes$approved_fellowships_grants_df <- dataframes$approved_fellowships_grants_df %>% 
    add_row(approved_fellowships_grants)
  
  dataframes$sift_grants_bynum_df <- dataframes$sift_grants_bynum_df %>% 
    add_row(sift_grants_bynum)
  
  dataframes$sift_grants_byvalue_df <- dataframes$sift_grants_byvalue_df %>% 
    add_row(sift_grants_byvalue)
  
  dataframes$funded_type2_bynum_df <- dataframes$funded_type2_bynum_df %>% 
    add_row(funded_type2_bynum)
  
  dataframes$funded_type2_byvalue_df <- dataframes$funded_type2_byvalue_df %>% 
    add_row(funded_type2_byvalue)
  
  dataframes$panel_rank_links_df <- dataframes$panel_rank_links_df %>% 
    add_row(panel_rank_links)
  
  if (log_on) {
    log_print(
      str_glue("Successfully extracted panel data from {link} and updated dataframes."), 
      console = FALSE
    )
  }
  
  # output the updated dataframes
  return(
    list(
      dataframes = dataframes,
      wait = panel$wait
    )
  )
  return(dataframes)
}

get_panel_data <- function(link, dataframes = panel_dataframes, log_on = TRUE){
  # Error resistant wrapper function for the wrapped sweet_get_panel_data
  out <- tryCatch(
    {
      sweet_get_panel_data(dataframes, link, log_on = log_on) 
    },
    error = function(cond){
      error_panel_links <<- c(error_panel_links, link)
      if (log_on) {
        log_print(
          str_glue(
          "Failed to extract panel data and update dataframes due to error.\n
Panel URL: {link}\n
{cond}\n
Failed links: \n{error_panel_links}"), 
          console = FALSE
        )
      }
      # set a wait time
      wait_time <- 15 #seconds
      
      # ensure that the dataframes are passed through without issue and unchanged
      return(list(
        dataframes = dataframes,
        wait = wait_time
      ))
    }
  )
  # wait
  Sys.sleep(out$wait)
  # update progress bar
  if (!pb$finished) {
    pb$tick()
  }
  
  return(out$dataframes)
  
}
```

```{r}
get_panel_data("NGBOViewPanel.aspx?PanelId=1-4SSWIR", dataframes = panel_dataframes, log_on = FALSE)
```



```{r }
# The complete html results list of panels between 01/01/2006 and 13/06/2021 has been downloaded and saved
panel_lst_content <- read_html('../data/gow_panels-01012006_to_13062021.html')

# parse HTML for list of hrefs
panel_href_list <- panel_lst_content %>%
  html_elements('#dgDetails a:nth-child(1)') %>% 
  html_attr('href')

bar_len <- length(panel_href_list)
pb <- init_bar(bar_len)

# Run through the progress bar
# for (i in 1:bar_len) {
#   if (!pb$finished) {
#     pb$tick()
#   }
# }


# for (link in panel_href_list) {
#   
# }

```


```{r}
panel_links <- tibble(link = panel_href_list) %>% mutate(group = apply(str_match(panel_href_list,"([A-Z]*)View(.*?).aspx?")[,2:3], 1,paste, collapse = ''))

sample_list <- panel_links %>% group_by(group) %>% slice_sample(n = 15) %>% pull(link)

for (link in sample_list) {
  browseURL(paste("https://gow.epsrc.ukri.org/", link,sep = ''))
}
```

```{r}
format(Sys.time(), "%Y%m%d_%H%M%S_")
```

