subject_df <<- subject_df %>% bind_rows(researchSubject)
# add to research_topic df
researchTopic <- as_tibble(project_info$projectOverview$projectComposition$project$researchTopic) %>%
add_column(project.ref = project_ref, .before = 1)
topic_df <<- topic_df %>% bind_rows(researchTopic)
# log successful data collection
log_print(
str_glue("Data collected from {project_url} successfully
in {round(as.numeric(wait_time),6)} seconds"),
console = FALSE
)
},
error=function(cond) {
# log the error in the dataframe for collection later
error_project_df <<- error_project_df %>% add_row(i = i, url = project_url)
error_time <- format(Sys.time(), "%H:%M:%S")
# log unsuccessful data collection with details of issue
log_print(str_glue("Data collection from {project_url} at {error_time} failed: \n
{cond} \n Waiting 5 minutes before resuming."))
# set the wait time to 5 minutes.
wait_time <<- 300
},
finally = {
# update progress bar to monitor process
prog_bar$tick()
# wait the calculated time
Sys.sleep(wait_time)
}
)
}
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- dim(project_df)[1]
prog_bar <- progress_bar$new(total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in seq_along(project_df$project_reference)) {
get_project_info(i)
}
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- dim(project_df)[1]
prog_bar <- progress_bar$new(total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in seq_along(project_df$project_reference)) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
# save and log data frames
person_df_mutated %>% write.csv("../data/person_df.csv")
log_print("person_df.csv saved")
organisation_df_mutated %>% write.csv("../data/organisation_df.csv")
log_print("organisation_df.csv saved")
subject_df %>% write.csv("../data/subject_df.csv")
log_print("subject_df.csv saved")
topic_df %>% write.csv("../data/topic_df.csv")
log_print("topic_df.csv saved")
project_df %>% write.csv("../data/project_df.csv")
log_print("project_df.csv saved")
# Close log
log_close()
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- dim(project_df)[1]
prog_bar <- progress_bar$new(total = 10)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:100) {
get_project_info(i)
}
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(format = "[:bar] :current/:total (:percent) eta - :eta",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(format = "[:bar] :current/:total - :percent complete - :elapsedfull - eta= :etafull",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/TESTRUN_", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
person_df_mutated
log_print("person_df.csv saved")
organisation_df_mutated
log_print("organisation_df.csv saved")
subject_df
log_print("subject_df.csv saved")
topic_df
log_print("topic_df.csv saved")
project_df
log_print("project_df.csv saved")
# Close log
log_close()
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta= :etafull",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/TESTRUN_", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
person_df_mutated
log_print("person_df.csv saved")
organisation_df_mutated
log_print("organisation_df.csv saved")
subject_df
log_print("subject_df.csv saved")
topic_df
log_print("topic_df.csv saved")
project_df
log_print("project_df.csv saved")
# Close log
log_close()
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta= :eta",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/TESTRUN_", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
person_df_mutated
log_print("person_df.csv saved")
organisation_df_mutated
log_print("organisation_df.csv saved")
subject_df
log_print("subject_df.csv saved")
topic_df
log_print("topic_df.csv saved")
project_df
log_print("project_df.csv saved")
# Close log
log_close()
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta =:eta",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/TESTRUN_", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
person_df_mutated
log_print("person_df.csv saved")
organisation_df_mutated
log_print("organisation_df.csv saved")
subject_df
log_print("subject_df.csv saved")
topic_df
log_print("topic_df.csv saved")
project_df
log_print("project_df.csv saved")
# Close log
log_close()
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- 100
prog_bar <- progress_bar$new(format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta = :eta",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/TESTRUN_", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
person_df_mutated
log_print("person_df.csv saved")
organisation_df_mutated
log_print("organisation_df.csv saved")
subject_df
log_print("subject_df.csv saved")
topic_df
log_print("topic_df.csv saved")
project_df
log_print("project_df.csv saved")
# Close log
log_close()
# init auxiliary df lists which will be later combined to make the auxiliary dfs
person_df <- tibble()
organisation_df <- tibble()
subject_df <- tibble()
topic_df <- tibble()
# init error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- dim(project_df)[1]
prog_bar <- progress_bar$new(format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta = :eta",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in 1:prog_bar_len) {
get_project_info(i)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
# save and log data frames
person_df_mutated %>% write.csv("../data/person_df.csv")
log_print("person_df.csv saved")
organisation_df_mutated %>% write.csv("../data/organisation_df.csv")
log_print("organisation_df.csv saved")
subject_df %>% write.csv("../data/subject_df.csv")
log_print("subject_df.csv saved")
topic_df %>% write.csv("../data/topic_df.csv")
log_print("topic_df.csv saved")
project_df %>% write.csv("../data/project_df.csv")
log_print("project_df.csv saved")
# Close log
log_close()
person_df_mutated
organisation_df_mutated
subject_df
topic_df
project_df
error_project_df$i
errored_projects <- error_project_df$i
for (i in errored_projects) {
print(i)
}
dim(errored_projects)
length(errored_projects)
# define the data collection function
get_project_info <- function(i) {
tryCatch(
{
# extract the project URL
project_url <<- project_df$gtr_project_url[i]
# extract the project reference number for use in the other dataframes
project_ref <<- project_df$project_reference[i]
# check and correct for faulty urls by rebuilding them
project_type <<- project_df$project_category[i]
if (project_type == "Studentship") {
# build correct Studentship URL with project ref number
project_url <<- paste(
"https://gtr.ukri.org/projects?ref=studentship-",
project_ref,
collapse = "",
sep = ""
)
# save corrected URL in dataframe
project_df$gtr_project_url[i] <- project_url
} else {
# build correct Studentship URL with project ref number
project_url <<- paste(
"https://gtr.ukri.org/projects?ref=",
project_ref,
collapse = "",
sep = ""
)
# save corrected URL in dataframe
project_df$gtr_project_url[i] <<- project_url
}
start_time <<- Sys.time()
project_info <<- fromJSON(
project_url,
simplifyDataFrame = TRUE,
flatten = TRUE)
end_time <<- Sys.time()
# calculate wait time
wait_time <<- end_time - start_time
# extract abstract and assign it to the relevant cell
abstract <<- project_info$projectOverview$projectComposition$project$abstractText
project_df$abstract[i] <<- abstract
# add to person df
personRole <<- as_tibble(project_info$projectOverview$projectComposition$personRole) %>%
add_column(project.ref = project_ref, .before = 1)
person_df <<- person_df %>% bind_rows(personRole)
# add to organisation df
organisationRole <- as_tibble(project_info$projectOverview$projectComposition$organisationRole) %>%
add_column(project.ref = project_ref, .before = 1)
organisation_df <<- organisation_df %>% bind_rows(organisationRole)
# add to research_subject df
researchSubject <- as_tibble(project_info$projectOverview$projectComposition$project$researchSubject) %>%
add_column(project.ref = project_ref, .before = 1)
subject_df <<- subject_df %>% bind_rows(researchSubject)
# add to research_topic df
researchTopic <- as_tibble(project_info$projectOverview$projectComposition$project$researchTopic) %>%
add_column(project.ref = project_ref, .before = 1)
topic_df <<- topic_df %>% bind_rows(researchTopic)
# log successful data collection
log_print(
str_glue("Data collected from {project_url} successfully in {round(as.numeric(wait_time),6)} seconds"),
console = FALSE
)
},
error=function(cond) {
# log the error in the dataframe for collection later
error_project_df <<- error_project_df %>% add_row(i = i, url = project_url)
error_time <- format(Sys.time(), "%H:%M:%S")
# log unsuccessful data collection with details of issue
log_print(str_glue("Data collection from {project_url} at {error_time} failed: \n {cond} \n Waiting 5 minutes before resuming."))
# set the wait time to 5 minutes.
wait_time <<- 300
},
finally = {
# update progress bar to monitor process
prog_bar$tick()
# wait the calculated time
Sys.sleep(wait_time)
}
)
}
# Pull the list of errorred projects row numbers
errorred_projects <- error_project_df$i
# Back up dataframe incase of an issue
ep_df_bkup <- error_project_df
# Empty error capture dataframe
error_project_df <- tibble(
i = numeric(),
url = character(),
)
# init progress bar
prog_bar_len <- length(errored_projects)
prog_bar <- progress_bar$new(format = "[:bar] :current/:total -:percent complete - :elapsedfull - eta = :eta",
total = prog_bar_len)
# start logging
log_file_dest <- paste0("../logs/", format(Sys.time(), "%Y%m%d_%H%M%S_"), "Errored_Project_Retry_log.log")
log_file <- log_open(log_file_dest, logdir = FALSE)
for (i in errored_projects) {
get_project_info(i)
# add extra sleep for safety
Sys.sleep(5)
}
person_df_mutated <- person_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
organisation_df_mutated <- organisation_df %>%
rowwise() %>%
mutate(role = paste(pull(role), collapse = ","))
# save and log data frames
person_df_mutated %>% write.csv("../data/person_df.csv")
log_print("person_df.csv saved")
organisation_df_mutated %>% write.csv("../data/organisation_df.csv")
log_print("organisation_df.csv saved")
subject_df %>% write.csv("../data/subject_df.csv")
log_print("subject_df.csv saved")
topic_df %>% write.csv("../data/topic_df.csv")
log_print("topic_df.csv saved")
project_df %>% write.csv("../data/project_df.csv")
log_print("project_df.csv saved")
# Close log
log_close()
person_df_mutated
organisation_df_mutated
subject_df
topic_df
project_df
