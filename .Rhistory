#dgPanelByNum
funded_type2_bynum <- panel$html %>%
extract_table("#dgPanelByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$funded_type2_bynum_df <- log_bind_row(dataframes$funded_type2_bynum_df, funded_type2_bynum, log_on = log_on)
#dgPanelByValue
funded_type2_byvalue <- panel$html %>%
extract_table("#dgPanelByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$funded_type2_byvalue_df <- log_bind_row(dataframes$funded_type2_byvalue_df, funded_type2_byvalue, log_on = log_on)
# pull links
#pnlContent a
panel_rank_links <-  panel$html %>%
extract_elements("#pnlContent a", attr = "href", log_on = log_on) %>%
tibble(href = .) %>%
#    filter(str_detect(href, "NGBOViewPanelROL.aspx?")) %>% # Commenting out to allow review of link incase this is not inclusive of all rank page links.
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$panel_rank_links_df <- log_bind_row(dataframes$panel_rank_links_df, panel_rank_links, log_on = log_on)
# output the updated dataframes, the wait time, and the unchanged errors
return(
list(
dataframes = dataframes,
wait = panel$wait,
errors = errors
)
)
}
get_panel_data <- function(link, dataframes = panel_dataframes, log_on = TRUE, errors = c()){
# Error resistant wrapper function for the wrapped sweet_get_panel_data
out <- tryCatch(
{
if (log_on) {
log_print(
str_glue("Starting data extraction from {link}."),
console = FALSE,
hide_notes = TRUE
)
}
sweet_get_panel_data(link, dataframes, log_on = log_on, errors = errors)
},
error = function(cond){
new_errors <- c(errors, link)
if (log_on) {
log_print(
str_glue(
"Failed to extract panel data and update dataframes due to error.\nPanel URL: {link}\n{cond}\nFailed links: \n{error_panel_links}"),
console = FALSE,
hide_notes = TRUE
)
}
# set a wait time
wait_time <- 15 #seconds
# ensure that the dataframes are passed through without issue and unchanged
return(
list(
dataframes = dataframes,
wait = wait_time,
errors = new_errors
)
)
}
)
# wait
Sys.sleep(out$wait)
# update progress bar if it has been created and has not finished
if (exists('pb')){
if (!pb$finished) {
pb$tick()
}
}
if (log_on) {
log_print(
str_glue("Finished data extraction from {link}."),
console = FALSE,
hide_notes = FALSE
)
}
return(out)
}
# Open log
lf <- log_open(paste0("../logs/gow/test_log_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".log"), logdir = FALSE)
get_panel_data("NGBOViewPanel.aspx?PanelId=1-4SSWIR", dataframes = dataframes, log_on = TRUE, errors = error_panel_links)
# Close log
log_close()
# View results
writeLines(readLines(lf))
# Open log
lf <- log_open(paste0("../logs/gow/sample_run_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".log"), logdir = FALSE)
# Create a sample list of panel_links
panel_links <- tibble(link = panel_href_list) %>% mutate(group = apply(str_match(panel_href_list,"([A-Z]*)View(.*?).aspx?")[,2:3], 1,paste, collapse = ''))
sample_list <- panel_links %>% group_by(group) %>% slice_sample(n = 10) %>% pull(link)
bar_len <- length(sample_list)
pb <- init_bar(bar_len)
for (link in sample_list) {
panel_data_output <- get_panel_data(link, dataframes = dataframes, log_on = TRUE, errors = error_panel_links)
dataframes <- panel_data_output$dataframes
error_panel_links <- panel_data_output$errors
#browseURL(paste("https://gow.epsrc.ukri.org/", link,sep = ''))
}
# Close log
log_close()
error_panel_links
View(dataframes)
source('~/.active-rstudio-document', echo=TRUE)
test_dataframes <- list(
panel_details_df = tibble(),
panel_members_df = tibble(),
funded_type1_bynum_df = tibble(),
funded_type1_byvalue_df = tibble(),
outlines_bynum_df = tibble(),
outline_byvalue_df = tibble(),
deferred_fellowships_grants_df = tibble(),
approved_fellowships_grants_df = tibble(),
sift_grants_bynum_df = tibble(),
sift_grants_byvalue_df = tibble(),
funded_type2_bynum_df = tibble(),
funded_type2_byvalue_df = tibble(),
panel_rank_links_df = tibble()
)
test_link <- "NGBOViewPanel.aspx?PanelId=1-4SSWIR"
log_on <- FALSE
# get panel html
panel <- get_html(test_link)
# extract general panel details
# general content: panel id - from link
panel_id <- str_match(test_link,"PanelId=(.*)")[2]
# general content: panel name (#lblPanelName) - from html
panel_name <- panel$html %>% html_element("#lblPanelName") %>% html_text()
# general content: panel date (#lblDateOfPanel) - from html
panel_date <- panel$html %>% html_element("#lblDateOfPanel") %>% html_text()
# general content: panel contact (#lblPanelContact) - from html
panel_contact <- panel$html %>% html_element("#lblPanelContact") %>% html_text()
# general content: panel page type - from link
panel_type <- paste(str_match(test_link,"([A-Z]*)View(.*?).aspx?")[2:3], collapse = '')
panel_details <- tibble(
panel_id = panel_id,
panel_name = panel_name,
panel_date = panel_date,
panel_contact = panel_contact,
panel_type = panel_type,
)
test_dataframes$panel_details_df <- log_bind_row(test_dataframes$panel_details_df, panel_details, log_on = log_on)
# extract tables
#dgDetails
panel_members <- panel$html %>%
extract_table("#dgDetails", head_row = FALSE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$panel_members_df <- log_bind_row(test_dataframes$panel_members_df, panel_members, log_on = log_on)
#dgFullByNum
funded_type1_bynum <- panel$html %>%
extract_table("#dgFullByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$funded_type1_bynum_df <- log_bind_row(test_dataframes$funded_type1_bynum_df, funded_type1_bynum, log_on = log_on)
#dgFullByValue
funded_type1_byvalue <- panel$html %>%
extract_table("#dgFullByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$funded_type1_byvalue_df <- log_bind_row(test_dataframes$funded_type1_byvalue_df, funded_type1_byvalue, log_on = log_on)
#dgOutlineByNumber
outlines_bynum <- panel$html %>%
extract_table("#dgOutlineByNumber", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$outlines_bynum_df <- log_bind_row(test_dataframes$outlines_bynum_df, outlines_bynum, log_on = log_on)
#dgOutlineByValue
outline_byvalue <- panel$html %>%
extract_table("#dgOutlineByValue", log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$outline_byvalue_df <- log_bind_row(test_dataframes$outline_byvalue_df, outline_byvalue, log_on = log_on)
#dgDeferredGrants span
deferred_fellowships_grants <- panel$html %>%
extract_elements("#dgDeferredGrants span", log_on = log_on) %>%
tibble(grant_ref = .) %>%
filter(grant_ref != "") %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$deferred_fellowships_grants_df <- log_bind_row(test_dataframes$deferred_fellowships_grants_df, deferred_fellowships_grants, log_on = log_on)
#dgGrants
approved_fellowships_grants <- panel$html %>%
extract_table("#dgGrants", log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$approved_fellowships_grants_df <- log_bind_row(test_dataframes$approved_fellowships_grants_df, approved_fellowships_grants, log_on = log_on)
#dgSiftByNumber
sift_grants_bynum <- panel$html %>%
extract_table("#dgSiftByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$sift_grants_bynum_df <- log_bind_row(test_dataframes$sift_grants_bynum_df, sift_grants_bynum, log_on = log_on)
#dgSiftByValue
sift_grants_byvalue <- panel$html %>%
extract_table("#dgSiftByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$sift_grants_byvalue_df <- log_bind_row(test_dataframes$sift_grants_byvalue_df, sift_grants_byvalue, log_on = log_on)
#dgPanelByNum
funded_type2_bynum <- panel$html %>%
extract_table("#dgPanelByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$funded_type2_bynum_df <- log_bind_row(test_dataframes$funded_type2_bynum_df, funded_type2_bynum, log_on = log_on)
#dgPanelByValue
funded_type2_byvalue <- panel$html %>%
extract_table("#dgPanelByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$funded_type2_byvalue_df <- log_bind_row(test_dataframes$funded_type2_byvalue_df, funded_type2_byvalue, log_on = log_on)
# pull links
#pnlContent a
panel_rank_links <-  panel$html %>%
extract_elements("#pnlContent a", attr = "href", log_on = log_on) %>%
tibble(href = .) %>%
filter(str_detect(href, "NGBOViewPanelROL.aspx?")) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
test_dataframes$panel_rank_links_df <- log_bind_row(test_dataframes$panel_rank_links_df, panel_rank_links, log_on = log_on)
source('~/.active-rstudio-document', echo=TRUE)
#dgSiftByNum
sift_grants_bynum <- panel$html %>%
extract_table("#dgSiftByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes <- list(
panel_details_df = tibble(),
panel_members_df = tibble(),
funded_type1_bynum_df = tibble(),
funded_type1_byvalue_df = tibble(),
outlines_bynum_df = tibble(),
outline_byvalue_df = tibble(),
deferred_fellowships_grants_df = tibble(),
approved_fellowships_grants_df = tibble(),
sift_grants_bynum_df = tibble(),
sift_grants_byvalue_df = tibble(),
funded_type2_bynum_df = tibble(),
funded_type2_byvalue_df = tibble(),
panel_rank_links_df = tibble()
)
error_panel_links <- c()
sweet_get_panel_data <- function(link, dataframes = dataframes, log_on = TRUE, errors = c()){
# wrapped function for collecting data from panel
# get panel html
panel <- get_html(link)
# extract general panel details
# general content: panel id - from link
panel_id <- str_match(link,"PanelId=(.*)")[2]
# general content: panel name (#lblPanelName) - from html
panel_name <- panel$html %>% html_element("#lblPanelName") %>% html_text()
# general content: panel date (#lblDateOfPanel) - from html
panel_date <- panel$html %>% html_element("#lblDateOfPanel") %>% html_text()
# general content: panel contact (#lblPanelContact) - from html
panel_contact <- panel$html %>% html_element("#lblPanelContact") %>% html_text()
# general content: panel page type - from link
panel_type <- paste(str_match(link,"([A-Z]*)View(.*?).aspx?")[2:3], collapse = '')
panel_details <- tibble(
panel_id = panel_id,
panel_name = panel_name,
panel_date = panel_date,
panel_contact = panel_contact,
panel_type = panel_type,
)
if (log_on) {
log_print(
str_glue("Successfully extracted panel details"),
console = FALSE,
hide_notes = TRUE
)
}
dataframes$panel_details_df <- log_bind_row(dataframes$panel_details_df, panel_details, log_on = log_on)
# extract tables
#dgDetails
panel_members <- panel$html %>%
extract_table("#dgDetails", head_row = FALSE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$panel_members_df <- log_bind_row(dataframes$panel_members_df, panel_members, log_on = log_on)
#dgFullByNum
funded_type1_bynum <- panel$html %>%
extract_table("#dgFullByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$funded_type1_bynum_df <- log_bind_row(dataframes$funded_type1_bynum_df, funded_type1_bynum, log_on = log_on)
#dgFullByValue
funded_type1_byvalue <- panel$html %>%
extract_table("#dgFullByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$funded_type1_byvalue_df <- log_bind_row(dataframes$funded_type1_byvalue_df, funded_type1_byvalue, log_on = log_on)
#dgOutlineByNumber
outlines_bynum <- panel$html %>%
extract_table("#dgOutlineByNumber", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$outlines_bynum_df <- log_bind_row(dataframes$outlines_bynum_df, outlines_bynum, log_on = log_on)
#dgOutlineByValue
outline_byvalue <- panel$html %>%
extract_table("#dgOutlineByValue", log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$outline_byvalue_df <- log_bind_row(dataframes$outline_byvalue_df, outline_byvalue, log_on = log_on)
#dgDeferredGrants span
deferred_fellowships_grants <- panel$html %>%
extract_elements("#dgDeferredGrants span", log_on = log_on) %>%
tibble(grant_ref = .) %>%
filter(grant_ref != "") %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$deferred_fellowships_grants_df <- log_bind_row(dataframes$deferred_fellowships_grants_df, deferred_fellowships_grants, log_on = log_on)
#dgGrants
approved_fellowships_grants <- panel$html %>%
extract_table("#dgGrants", log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$approved_fellowships_grants_df <- log_bind_row(dataframes$approved_fellowships_grants_df, approved_fellowships_grants, log_on = log_on)
#dgSiftByNum
sift_grants_bynum <- panel$html %>%
extract_table("#dgSiftByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$sift_grants_bynum_df <- log_bind_row(dataframes$sift_grants_bynum_df, sift_grants_bynum, log_on = log_on)
#dgSiftByValue
sift_grants_byvalue <- panel$html %>%
extract_table("#dgSiftByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$sift_grants_byvalue_df <- log_bind_row(dataframes$sift_grants_byvalue_df, sift_grants_byvalue, log_on = log_on)
#dgPanelByNum
funded_type2_bynum <- panel$html %>%
extract_table("#dgPanelByNum", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$funded_type2_bynum_df <- log_bind_row(dataframes$funded_type2_bynum_df, funded_type2_bynum, log_on = log_on)
#dgPanelByValue
funded_type2_byvalue <- panel$html %>%
extract_table("#dgPanelByValue", head_row = TRUE, log_on = log_on) %>%
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$funded_type2_byvalue_df <- log_bind_row(dataframes$funded_type2_byvalue_df, funded_type2_byvalue, log_on = log_on)
# pull links
#pnlContent a
panel_rank_links <-  panel$html %>%
extract_elements("#pnlContent a", attr = "href", log_on = log_on) %>%
tibble(href = .) %>%
#    filter(str_detect(href, "NGBOViewPanelROL.aspx?")) %>% # Commenting out to allow review of link incase this is not inclusive of all rank page links.
mutate(panel_id = panel_id, panel_type = panel_type)
dataframes$panel_rank_links_df <- log_bind_row(dataframes$panel_rank_links_df, panel_rank_links, log_on = log_on)
# output the updated dataframes, the wait time, and the unchanged errors
return(
list(
dataframes = dataframes,
wait = panel$wait,
errors = errors
)
)
}
get_panel_data <- function(link, dataframes = panel_dataframes, log_on = TRUE, errors = c()){
# Error resistant wrapper function for the wrapped sweet_get_panel_data
out <- tryCatch(
{
if (log_on) {
log_print(
str_glue("Starting data extraction from {link}."),
console = FALSE,
hide_notes = TRUE
)
}
sweet_get_panel_data(link, dataframes, log_on = log_on, errors = errors)
},
error = function(cond){
new_errors <- c(errors, link)
if (log_on) {
log_print(
str_glue(
"Failed to extract panel data and update dataframes due to error.\nPanel URL: {link}\n{cond}\nFailed links: \n{error_panel_links}"),
console = FALSE,
hide_notes = TRUE
)
}
# set a wait time
wait_time <- 15 #seconds
# ensure that the dataframes are passed through without issue and unchanged
return(
list(
dataframes = dataframes,
wait = wait_time,
errors = new_errors
)
)
}
)
# wait
Sys.sleep(out$wait)
# update progress bar if it has been created and has not finished
if (exists('pb')){
if (!pb$finished) {
pb$tick()
}
}
if (log_on) {
log_print(
str_glue("Finished data extraction from {link}."),
console = FALSE,
hide_notes = FALSE
)
}
return(out)
}
# Open log
lf <- log_open(paste0("../logs/gow/sample_run_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".log"), logdir = FALSE)
# init progress bar
bar_len <- length(panel_href_list)
pb <- init_bar(bar_len)
for (link in panel_href_list) {
panel_data_output <- get_panel_data(link, dataframes = dataframes, log_on = TRUE, errors = error_panel_links)
dataframes <- panel_data_output$dataframes
error_panel_links <- panel_data_output$errors
#browseURL(paste("https://gow.epsrc.ukri.org/", link,sep = ''))
}
# Close log
log_close()
# view failed links
error_panel_links
# view dataframe
dataframes
# Open log
lf <- log_open(paste0("../logs/gow/full_run_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".log"), logdir = FALSE)
# init progress bar
bar_len <- length(panel_href_list)
pb <- init_bar(bar_len)
for (link in panel_href_list) {
panel_data_output <- get_panel_data(link, dataframes = dataframes, log_on = TRUE, errors = error_panel_links)
dataframes <- panel_data_output$dataframes
error_panel_links <- panel_data_output$errors
#browseURL(paste("https://gow.epsrc.ukri.org/", link,sep = ''))
}
# Close log
log_close()
# view failed links
error_panel_links
# view dataframe
dataframes
dataframes <- list(
panel_details_df = tibble(),
panel_members_df = tibble(),
funded_type1_bynum_df = tibble(),
funded_type1_byvalue_df = tibble(),
outlines_bynum_df = tibble(),
outline_byvalue_df = tibble(),
deferred_fellowships_grants_df = tibble(),
approved_fellowships_grants_df = tibble(),
sift_grants_bynum_df = tibble(),
sift_grants_byvalue_df = tibble(),
funded_type2_bynum_df = tibble(),
funded_type2_byvalue_df = tibble(),
panel_rank_links_df = tibble()
)
error_panel_links <- c()
# Open log
lf <- log_open(paste0("../logs/gow/full_run_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".log"), logdir = FALSE)
# init progress bar
bar_len <- length(panel_href_list)
pb <- init_bar(bar_len)
for (link in panel_href_list) {
panel_data_output <- get_panel_data(link, dataframes = dataframes, log_on = TRUE, errors = error_panel_links)
dataframes <- panel_data_output$dataframes
error_panel_links <- panel_data_output$errors
#browseURL(paste("https://gow.epsrc.ukri.org/", link,sep = ''))
}
# Close log
log_close()
# view failed links
error_panel_links
# view dataframe
dataframes
for (df in sample_dataframes) {
print(deparse(substitute(df)))
}
# view dataframe
sample_dataframes
sample_dataframes <- dataframes
for (df in sample_dataframes) {
print(deparse(substitute(df)))
}
sample_dataframes %>% names()
for (df in sample_dataframes) {
print(name(df))
}
for (df in sample_dataframes) {
print(names(df))
}
sample_dataframes <- dataframes
sample_dataframes %>% names()
for (dfname in sample_dataframes %>% names()) {
print(df)
}
for (dfname in sample_dataframes %>% names()) {
print(df)
}
sample_dataframes <- dataframes
sample_dataframes %>% names()
for (dfname in sample_dataframes %>% names()) {
print(dfname)
}
sample_dataframes["panel_details_df"]
sample_dataframes[["panel_details_df"]]
for (dfname in sample_dataframes %>% names()) {
print(dfname)
sample_dataframes[[dfname]]
}
for (dfname in sample_dataframes %>% names()) {
sample_dataframes[[dfname]]
}
print(sample_dataframes[[dfname]])
sample_dataframes <- dataframes
sample_dataframes[["panel_details_df"]]
for (dfname in sample_dataframes %>% names()) {
print(sample_dataframes[[dfname]])
}
for (dfname in sample_dataframes %>% names()) {
print(dfname)
}
saved_dataframes <- dataframes
save_path <- "../data/panel_dataframes/"
for (dfname in saved_dataframes %>% names()) {
path <- paste0(save_path,dfname,".csv")
saved_dataframes[[dfname]] %>% write_csv(file = path)
}
saved_dataframes <- dataframes
save_path <- "../data/panel_dataframes/"
for (dfname in saved_dataframes %>% names()) {
path <- paste0(save_path,dfname,".csv")
saved_dataframes[[dfname]] %>% write_csv(file = path)
}
